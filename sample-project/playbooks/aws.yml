---
- name: bootstrapping aws environments
  hosts: localhost
  connection: local
  #  strategy: debug
  gather_facts: no
  environment:
    AWS_DEFAULT_PROFILE: "{{ aws_profile }}"
    AWS_REGION: "{{ aws_region }}"
  tasks:
    - name: "VPC"
      ec2_vpc_net:
        name: "{{ vpc.name }}"
        cidr_block: "{{ vpc.cidr_block }}"
        tags:
          module: ec2_vpc_net
      register: _vpc
    - debug: var=_vpc verbosity=1

    - name: "Internet Gateway"
      ec2_vpc_igw:
        vpc_id: "{{ _vpc.vpc.id }}"
      register: _igw
    - debug: var=_igw verbosity=1

    - name: "Subnet"
      ec2_vpc_subnet:
        vpc_id: "{{ _vpc.vpc.id }}"
        az: "{{ item.az }}"
        cidr: "{{ item.cidr }}"
        resource_tags:
          Name: "{{ item.name }}"
      with_items: "{{ subnet }}"
      register: _subnet
    - debug: var=_subnet verbosity=1

    - name: "Route Table (Public)"
      ec2_vpc_route_table:
        vpc_id: "{{ _vpc.vpc.id }}"
        tags:
          Name: "PublicRoute"
        subnets: "{{ _subnet.results | selectattr('item.route', 'equalto', 'public') | map(attribute='subnet.id') | list }}"
        routes:
          - dest: 0.0.0.0/0
            gateway_id: "{{ _igw.gateway_id }}"
      register: _public_rt
    - debug: var=_public_rt verbosity=1

    - name: "Keypair"
      ec2_key:
        name: "{{ keypair.name }}"
      register: _keypair
    - debug: var=_keypair verbosity=1

    - name: "Create Keypair File"
      file:
        path: ~/.ssh/{{ _keypair.key.name }}.pem
        state: touch
        mode: 0600
      when: _keypair.key.private_key is defined

    - name: "Keypair Write"
      shell: echo "{{ _keypair.key.private_key }}" > ~/.ssh/"{{ _keypair.key.name }}".pem
      when: _keypair.key.private_key is defined

    - name: "Security Group"
      ec2_group:
        name: "{{ item.name }}"
        description: "{{ item.desc }}"
        vpc_id: "{{ _vpc.vpc.id }}"
        purge_rules: yes
        rules: "{{ item.rules }}"
      with_items: "{{ sg }}"
      register: _sg
    - debug: var=_sg verbosity=1

    - name: "EC2"
      ec2:
        instance_tags: &TAG_INFO
          Name: "{{ item.name }}"
          Role: "{{ item.role }}"
          Env: "{{ env }}"
        count_tag: *TAG_INFO
        exact_count: 1
        instance_type: "{{ item.instance_type }}"
        image: "{{ item.ami_image }}"
        vpc_subnet_id: "{{ _subnet.results | selectattr('item.name', 'equalto', item.subnet) | map(attribute='subnet.id') | list | first }}"
        group: "{{ item.security_group }}"
        assign_public_ip: yes
        volumes:
          - device_name: /dev/xvda
            volume_type: gp2
            volume_size: "{{ item.volume_size }}"
        key_name: "{{ keypair.name }}"
        wait: yes
        wait_timeout: 180
      with_items: "{{ ec2 }}"
      register: _ec2
    - debug: var=_ec2 verbosity=1

    - name: "Wait for SSH to come up"
      wait_for:
        host: "{{ item.public_dns_name }}"
        port: 22
        timeout: 300
        delay: 10
        state: started
      with_items: "{{ _ec2.results | selectattr('tagged_instances', 'defined') | map(attribute='tagged_instances') | list }}"

    - name: "ElasticLoadBalancer"
      ec2_elb_lb:
        name: "{{ item.name }}"
        state: present
        subnets: "{{ _subnet.results | selectattr('item.route', 'equalto', 'public') | map(attribute='subnet.id') | list }}"
        security_group_names: "{{ item.security_group }}"
        listeners: "{{ item.listeners }}"
        health_check: "{{ item.health_check }}"
      with_items: "{{ elb }}"
      register: _elb
    - debug: var=_elb verbosity=1

    #- name: "Register ec2 instances"
    #  ec2_elb:
    #    ec2_elbs: "{{ elb[0].name }}"
    #    instance_id: "{{ item.id }}"
    #    state: present
    #    wait: no
    #  with_items: "{{ _ec2.results | selectattr('tagged_instances', 'defined') | map(attribute='tagged_instances') | list }}"
